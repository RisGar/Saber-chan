/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
  env: {
    browser: true,
    es6: true,
    node: true,
  },
  extends: [
    "airbnb-typescript/base",
    //"airbnb/hooks",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
  ],
  ignorePatterns: ["node_modules", "dist", "coverage"],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: "./tsconfig.json",
    sourceType: "module",
  },
  plugins: ["@typescript-eslint"],
  rules: {
    "new-cap": "off",
    "@typescript-eslint/indent": ["error"],
    "linebreak-style": ["error", "windows"],
    "@typescript-eslint/class-name-casing": "error",
    "@typescript-eslint/consistent-type-assertions": "error",
    /*"@typescript-eslint/indent": [
      "error",
      4,
      {
        FunctionDeclaration: {
          parameters: "first",
        },
        FunctionExpression: {
          parameters: "first",
        },
      },
    ],*/
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        multiline: {
          delimiter: "none",
          requireLast: true,
        },
        singleline: {
          delimiter: "semi",
          requireLast: false,
        },
      },
    ],
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-param-reassign": "off",
    "@typescript-eslint/quotes": [
      "error",
      "double",
      {
        avoidEscape: true,
      },
    ],
    "semi": "off",
    "@typescript-eslint/semi": ["off"],
    "arrow-body-style": ["error", "always"],
    camelcase: "error",
    "capitalized-comments": ["error", "always"],
    "comma-dangle": "off",
    curly: ["error", "multi-line"],
    "eol-last": "error",
    eqeqeq: ["error", "always"],
    "guard-for-in": "off",
    "id-blacklist": [
      "error",
      "any",
      "Number",
      "number",
      "String",
      "string",
      "Boolean",
      "boolean",
      "Undefined",
      "undefined",
    ],
    "id-match": "error",
    "import/order": "error",
    "jsdoc/check-alignment": "error",
    "jsdoc/check-indentation": "error",
    "jsdoc/newline-after-description": "error",
    "max-classes-per-file": "off",
    "max-len": [
      "error",
      {
        code: 120,
      },
    ],
    "no-console": "off",
    "no-eval": "off",
    "no-multiple-empty-lines": "error",
    "no-shadow": [
      "error",
      {
        hoist: "never",
      },
    ],
    "no-undef-init": "error",
    "no-underscore-dangle": "error",
    "prefer-arrow/prefer-arrow-functions": "error",
    "prefer-template": "error",
    "quote-props": ["error", "as-needed"],
    "spaced-comment": [
      "error",
      "always",
      {
        markers: ["/"],
      },
    ],
  },
  settings: {},
};
